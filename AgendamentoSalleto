ðŸ“‚ app
 â”œâ”€â”€ ðŸ“‚ java/com/Salleto/agendamento
 â”‚    â”œâ”€â”€ MainActivity.kt
 â”‚    â”œâ”€â”€ TelaAgendamento.kt
 â”‚    â”œâ”€â”€ ItemAgendamento.kt
 â”‚    â”œâ”€â”€ ðŸ“‚ database
 â”‚    â”‚    â”œâ”€â”€ BancoDeDados.kt
 â”‚    â”‚    â”œâ”€â”€ Agendamento.kt
package com.exemplo.agendamento.database

data class Agendamento(
    val id: Int = 0,
    val setor: String,
    val horario: String
)
package com.exemplo.agendamento.database

import android.content.ContentValues
import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper

class BancoDeDados(context: Context) : SQLiteOpenHelper(context, NOME_BANCO, null, VERSAO_BANCO) {

    override fun onCreate(db: SQLiteDatabase) {
        val criarTabela = "CREATE TABLE $TABELA ($COLUNA_ID INTEGER PRIMARY KEY AUTOINCREMENT, $COLUNA_SETOR TEXT, $COLUNA_HORARIO TEXT)"
        db.execSQL(criarTabela)
    }

    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        db.execSQL("DROP TABLE IF EXISTS $TABELA")
        onCreate(db)
    }

    fun adicionarAgendamento(agendamento: Agendamento): Boolean {
        val db = writableDatabase
        val valores = ContentValues().apply {
            put(COLUNA_SETOR, agendamento.setor)
            put(COLUNA_HORARIO, agendamento.horario)
        }
        val resultado = db.insert(TABELA, null, valores)
        db.close()
        return resultado != -1L
    }

    fun listarAgendamentos(): List<Agendamento> {
        val lista = mutableListOf<Agendamento>()
        val db = readableDatabase
        val cursor = db.rawQuery("SELECT * FROM $TABELA", null)
        while (cursor.moveToNext()) {
            lista.add(
                Agendamento(
                    id = cursor.getInt(0),
                    setor = cursor.getString(1),
                    horario = cursor.getString(2)
                )
            )
        }
        cursor.close()
        db.close()
        return lista
    }

    fun excluirAgendamento(id: Int): Boolean {
        val db = writableDatabase
        val resultado = db.delete(TABELA, "$COLUNA_ID=?", arrayOf(id.toString()))
        db.close()
        return resultado > 0
    }

    companion object {
        private const val NOME_BANCO = "agendamentos.db"
        private const val VERSAO_BANCO = 1
        const val TABELA = "agendamentos"
        const val COLUNA_ID = "id"
        const val COLUNA_SETOR = "setor"
        const val COLUNA_HORARIO = "horario"
    }
}
package com.exemplo.agendamento

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.exemplo.agendamento.database.Agendamento
import com.exemplo.agendamento.database.BancoDeDados

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val banco = BancoDeDados(this)

        setContent {
            var agendamentos by remember { mutableStateOf(banco.listarAgendamentos()) }

            Scaffold(
                floatingActionButton = {
                    FloatingActionButton(onClick = {
                        TelaAgendamento(banco) {
                            agendamentos = banco.listarAgendamentos()
                        }
                    }) {
                        Text("+")
                    }
                }
            ) {
                Column(modifier = Modifier.padding(16.dp)) {
                    Text("Agendamentos", style = MaterialTheme.typography.h5)
                    LazyColumn {
                        items(agendamentos) { agendamento ->
                            ItemAgendamento(agendamento) {
                                banco.excluirAgendamento(agendamento.id)
                                agendamentos = banco.listarAgendamentos()
                            }
                        }
                    }
                }
            }
        }
    }
}
package com.exemplo.agendamento

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.exemplo.agendamento.database.Agendamento

@Composable
fun ItemAgendamento(agendamento: Agendamento, aoExcluir: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
            .clickable { aoExcluir() },
        elevation = 4.dp
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text("Setor: ${agendamento.setor}", style = MaterialTheme.typography.h6)
            Text("HorÃ¡rio: ${agendamento.horario}")
            Button(onClick = aoExcluir, modifier = Modifier.padding(top = 8.dp)) {
                Text("Excluir")
            }
        }
    }
}
package com.exemplo.agendamento

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.exemplo.agendamento.database.Agendamento
import com.exemplo.agendamento.database.BancoDeDados

@Composable
fun TelaAgendamento(banco: BancoDeDados, aoAgendar: () -> Unit) {
    var setor by remember { mutableStateOf("RH") }
    var horario by remember { mutableStateOf("") }

    Column(modifier = Modifier.padding(16.dp)) {
        Text("Agendar ReuniÃ£o", style = MaterialTheme.typography.h5)

        MenuSuspenso(setor) { setor = it }

        BasicTextField(
            value = horario,
            onValueChange = { horario = it },
            modifier = Modifier
                .fillMaxWidth()
                .padding(8.dp),
            singleLine = true
        )

        Button(onClick = {
            if (horario.isNotEmpty()) {
                banco.adicionarAgendamento(Agendamento(setor = setor, horario = horario))
                aoAgendar()
            }
        }, modifier = Modifier.padding(top = 16.dp)) {
            Text("Confirmar Agendamento")
        }
    }
}

@Composable
fun MenuSuspenso(itemSelecionado: String, aoSelecionar: (String) -> Unit) {
    var expandido by remember { mutableStateOf(false) }
    val setores = listOf("RH", "Sala de ReuniÃ£o")

    Box {
        Button(onClick = { expandido = true }) {
            Text(itemSelecionado)
        }
        DropdownMenu(expanded = expandido, onDismissRequest = { expandido = false }) {
            setores.forEach { setor ->
                DropdownMenuItem(onClick = {
                    aoSelecionar(setor)
                    expandido = false
                }) {
                    Text(setor)
                }
            }
        }
    }
}
